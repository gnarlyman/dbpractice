// Code generated by MockGen. DO NOT EDIT.
// Source: db.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	repo "github.com/gnarlyman/dbpractice/internal/db/repo"
	gomock "github.com/golang/mock/gomock"
)

// MockIDB is a mock of IDB interface.
type MockIDB struct {
	ctrl     *gomock.Controller
	recorder *MockIDBMockRecorder
}

// MockIDBMockRecorder is the mock recorder for MockIDB.
type MockIDBMockRecorder struct {
	mock *MockIDB
}

// NewMockIDB creates a new mock instance.
func NewMockIDB(ctrl *gomock.Controller) *MockIDB {
	mock := &MockIDB{ctrl: ctrl}
	mock.recorder = &MockIDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDB) EXPECT() *MockIDBMockRecorder {
	return m.recorder
}

// GetUserRepo mocks base method.
func (m *MockIDB) GetUserRepo() repo.IUserRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRepo")
	ret0, _ := ret[0].(repo.IUserRepo)
	return ret0
}

// GetUserRepo indicates an expected call of GetUserRepo.
func (mr *MockIDBMockRecorder) GetUserRepo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRepo", reflect.TypeOf((*MockIDB)(nil).GetUserRepo))
}

// Stop mocks base method.
func (m *MockIDB) Stop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockIDBMockRecorder) Stop(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockIDB)(nil).Stop), ctx)
}
