// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	swagger "github.com/gnarlyman/dbpractice/pkg/swagger"
	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
)

// MockIHandler is a mock of IHandler interface.
type MockIHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIHandlerMockRecorder
}

// MockIHandlerMockRecorder is the mock recorder for MockIHandler.
type MockIHandlerMockRecorder struct {
	mock *MockIHandler
}

// NewMockIHandler creates a new mock instance.
func NewMockIHandler(ctrl *gomock.Controller) *MockIHandler {
	mock := &MockIHandler{ctrl: ctrl}
	mock.recorder = &MockIHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHandler) EXPECT() *MockIHandlerMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockIHandler) AddUser(ctx echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockIHandlerMockRecorder) AddUser(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockIHandler)(nil).AddUser), ctx)
}

// DeleteUser mocks base method.
func (m *MockIHandler) DeleteUser(ctx echo.Context, userId int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockIHandlerMockRecorder) DeleteUser(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockIHandler)(nil).DeleteUser), ctx, userId)
}

// FindUserById mocks base method.
func (m *MockIHandler) FindUserById(ctx echo.Context, userId int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserById", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindUserById indicates an expected call of FindUserById.
func (mr *MockIHandlerMockRecorder) FindUserById(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserById", reflect.TypeOf((*MockIHandler)(nil).FindUserById), ctx, userId)
}

// FindUsers mocks base method.
func (m *MockIHandler) FindUsers(ctx echo.Context, params swagger.FindUsersParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUsers", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindUsers indicates an expected call of FindUsers.
func (mr *MockIHandlerMockRecorder) FindUsers(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUsers", reflect.TypeOf((*MockIHandler)(nil).FindUsers), ctx, params)
}

// GetApiV1SwaggerJson mocks base method.
func (m *MockIHandler) GetApiV1SwaggerJson(ctx echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiV1SwaggerJson", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetApiV1SwaggerJson indicates an expected call of GetApiV1SwaggerJson.
func (mr *MockIHandlerMockRecorder) GetApiV1SwaggerJson(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiV1SwaggerJson", reflect.TypeOf((*MockIHandler)(nil).GetApiV1SwaggerJson), ctx)
}

// HeadApiV1Users mocks base method.
func (m *MockIHandler) HeadApiV1Users(ctx echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeadApiV1Users", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// HeadApiV1Users indicates an expected call of HeadApiV1Users.
func (mr *MockIHandlerMockRecorder) HeadApiV1Users(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadApiV1Users", reflect.TypeOf((*MockIHandler)(nil).HeadApiV1Users), ctx)
}

// HeadApiV1UsersUserId mocks base method.
func (m *MockIHandler) HeadApiV1UsersUserId(ctx echo.Context, userId int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeadApiV1UsersUserId", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// HeadApiV1UsersUserId indicates an expected call of HeadApiV1UsersUserId.
func (mr *MockIHandlerMockRecorder) HeadApiV1UsersUserId(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadApiV1UsersUserId", reflect.TypeOf((*MockIHandler)(nil).HeadApiV1UsersUserId), ctx, userId)
}

// OptionsApiV1Users mocks base method.
func (m *MockIHandler) OptionsApiV1Users(ctx echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OptionsApiV1Users", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// OptionsApiV1Users indicates an expected call of OptionsApiV1Users.
func (mr *MockIHandlerMockRecorder) OptionsApiV1Users(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OptionsApiV1Users", reflect.TypeOf((*MockIHandler)(nil).OptionsApiV1Users), ctx)
}

// OptionsApiV1UsersUserId mocks base method.
func (m *MockIHandler) OptionsApiV1UsersUserId(ctx echo.Context, userId int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OptionsApiV1UsersUserId", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// OptionsApiV1UsersUserId indicates an expected call of OptionsApiV1UsersUserId.
func (mr *MockIHandlerMockRecorder) OptionsApiV1UsersUserId(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OptionsApiV1UsersUserId", reflect.TypeOf((*MockIHandler)(nil).OptionsApiV1UsersUserId), ctx, userId)
}

// PatchUser mocks base method.
func (m *MockIHandler) PatchUser(ctx echo.Context, userId int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchUser", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchUser indicates an expected call of PatchUser.
func (mr *MockIHandlerMockRecorder) PatchUser(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchUser", reflect.TypeOf((*MockIHandler)(nil).PatchUser), ctx, userId)
}

// UpdateUser mocks base method.
func (m *MockIHandler) UpdateUser(ctx echo.Context, userId int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockIHandlerMockRecorder) UpdateUser(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockIHandler)(nil).UpdateUser), ctx, userId)
}
