openapi: "3.0.0"
info:
  version: 1.0.0
  title: DB Practice
  description: A test swagger for interacting with a database
  contact:
    name: Mike Schon
    email: mschon314@gmail.com
servers:
  - url: http://localhost:8080
paths:
  /api/v1/swagger.json:
    get:
      responses:
        200:
          description: swagger json
          content:
            application/json:
              schema:
                description: swagger json
  /api/v1/users:
    get:
      description: |
        Returns all users from the system
      operationId: findUsers
      parameters:
        - name: username
          in: query
          description: username to filter by
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: user response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new user
      operationId: addUser
      requestBody:
        description: User to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '200':
          description: user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/users/{user_id}:
    get:
      description: Returns a user based on a single ID
      operationId: findUserById
      parameters:
        - name: user_id
          in: path
          description: ID of user to fetch
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: deletes a single user based on the ID supplied
      operationId: deleteUser
      parameters:
        - name: user_id
          in: path
          description: ID of the user to delete
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: pet deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      description: update a user based on the ID supplied
      operationId: updateUser
      requestBody:
        description: changes to user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      parameters:
        - name: user_id
          in: path
          description: ID of the user to update
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
            description: user response
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      description: patch a user based on the ID supplied only changing specified fields
      operationId: patchUser
      requestBody:
        description: changes to user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchUser'
      parameters:
        - name: user_id
          in: path
          description: ID of the user to patch
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    User:
      allOf:
        - $ref: '#/components/schemas/NewUser'
        - type: object
          required:
            - user_id
          properties:
            user_id:
              type: integer
              format: int32
            created_at:
              type: string
            updated_at:
              type: string

    NewUser:
      type: object
      required:
        - username
        - email
      properties:
        username:
          type: string
        password:
          type: string
        email:
          type: string

    PatchUser:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        email:
          type: string

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

externalDocs:
  description: Find more info here
  url: http://localhost:8080/api/v1/swagger.json
